# This File discusses the key points to consider for setting up prod enviroment. For this task, I have created only dev enironment and writing the list of additional steps to consider when creating PROD environment

Virtual environments
A virtual environment is a tool that helps to keep dependencies required by different projects separate by creating isolated spaces for them that contain per-project dependencies for them.

Users can create virtual environments using one of several tools such as Pipenv or Poetry, or a conda virtual environment. Pipenv and Poetry are based around Python's built-in venv library, whereas conda has its own notion of virtual environments that is lower-level (Python itself is a dependency provided in conda environments).

Why use conda virtual environments?
1. Control over binary compatibility choices.
2. Utilize newer language standards, such as C++ 17.
3. Libraries beyond what the system Python offers.
4. Manage packages from languages other than Python in the same space.
5. High Availability
6. Redundancy
7. Better System Resource Management for the production workload
8. Reporting on system failures and workload issues
9. Avoiding single point of failure
10. Easy package management for deploying the code in other environments 
11. Security 
    11.a Control over binary installation and source of packages for updating environment (Source control, Version control)
    11.b Workflow differentiators
         Consider below questions before you use workflow differentiators for workload management, security around workload accessing the program
          Is your environment shared across multiple code projects?
          Does your environment live alongside your code or in a separate place?
          Do your install steps involve installing any external libraries?
          Do you want to ship your environment as an archive of some sort containing the actual files of the environment?
     11.c Implement relevant RBAC using package differentiators (assuming system RBAC is alreadt in place as part of infrastructure design). And also manage binary compatibility and ownership of the pkg distribution.
          Conda has unlimited namespaces (channels) and distributed ownership of a given channel. As such, it is easier to ensure binary compatibility within a channel using conda. 
          
 ** We assume that setting up secure production environment access (RBAC, firewall rules, sub-netting, permissions to file and folders, change control) is being taken care by infrastructure security design and ITIL processes within the organisation.          
          
          





